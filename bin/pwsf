#!/usr/bin/env ruby

begin
f = File.readlink(__FILE__)
rescue
f = __FILE__
end

if File.exists?(File.join(File.expand_path('../..', f), '.git'))
  $:.unshift(File.expand_path('../../lib', f))
end

require 'optparse'
require 'clipboard'
require 'passwordsafe'

options = {
  :stdin => false,
  :db_path => "#{ENV['HOME']}/.pwsafe/default.psafe3"
}
OptionParser.new do |opts|
  opts.banner = <<END
  Usage: pws [options] <list|copy|query|diff>

  pws list [<name regexp>]
    list all entries or entries matching given regexp

  pws copy <name regexp>
    copy password to clipboard, after user presses any key, copy username and exit

  pws query <field> [<field>~<regexp>]
    print given field for each entry where field matches given regexp

  pws diff <database>
    diff two databases

  Examples:
    $ echo -n bogus12345 | ./pws -p ./simple.psafe3 -S list
    Test eight
    Test Four
    Test.Test One
    Test seven
    Test Two
    Test.Test Nine
    Test six
    Test.Test One
    Test Five

    $ echo -n bogus12345 | ./pws -p ./simple.psafe3 -S list Test.Test
    Test.Test One
    Test.Test Nine
    Test.Test One

    $ echo -n bogus12345 | ./pws -p ./simple.psafe3 -S query username
    user8
    user4
    user2
    user7
    user3
    user9
    user6
    user1
    user5

    $ echo -n bogus12345 | ./pws -p ./simple.psafe3 -S query username name~six

    $ echo -n bogus12345 | ./pws -p ./simple.psafe3 -S copy 'Test six'
    Password is now in your clipboard, press ENTER to copy username

  Options:
END
  opts.on("-S", "Read password from stdin") do |v|
    options[:stdin] = true
  end

  opts.on("-p", "--db-path=PATH", "Path to the database") do |v|
    options[:db_path] = v
  end
end.parse!

raise "Invalid DB path '#{options[:db_path]}'" unless File.exists?(options[:db_path])
raise "Please specify command" if ARGV.size == 0

op = ARGV.shift
raise "Invalid command '#{op}'" unless [ 'show', 'copy', 'diff', 'query', 'list' ].include? op

keychain = PasswordSafe::KeychainV3.new(options[:db_path], true)

if options[:stdin]
  keychain.unlock(STDIN.read)
else
  keychain.unlock
end

def op_list(keychain, re)
  name = []

  if re
    re = Regexp.new(re, Regexp::IGNORECASE) if re
    keychain.each { |r| name << r.name if r.name =~ re }
  else
    keychain.each { |r| name << r.name }
  end
  name.sort

  name.each { |r| puts r }
end

def copy(keychain, r)
  raise "Invalid entry" unless r.has_field?(:password) and r.has_field?(:username)

  Clipboard.copy(r.password)
  keychain.ask("Password is now in your clipboard, press ENTER to copy username")
  Clipboard.copy(r.username)
end

def show(r)
  skip = ['pwd_expiry_int', 'last_modify_time_time', 'create_time', 'pwd_history', 'uuid', 'dclick_action', 'sdclick_action' ]

  puts "#{r.name}:"
  r.each do |k, v|
    next if skip.include? k

    puts "#{k}=#{v.inspect}"
  end
end

def op_copy(keychain, re)
  found = []

  re = Regexp.new(re, Regexp::IGNORECASE)

  keychain.each { |r| found << r if r.name =~ re }

  if found.size == 0
    puts "Nothing found!"
    exit 1
  elsif found.size == 1
    copy(keychain, found[0])
  else
    puts "Found #{found.size} entries, select which to copy:"
    found.each_with_index { |r, i| puts "#{i}) #{r.name}" }

    idx = keychain.ask("Entry index:")
    copy(keychain, found[idx.to_i])
  end
end

def op_show(keychain, re)
  found = []

  re = Regexp.new(re, Regexp::IGNORECASE)

  keychain.each { |r| found << r if r.name =~ re }

  if found.size == 0
    puts "Nothing found!"
    exit 1
  else
    found.each { |r| show(r) }
  end
end

def op_query(keychain, field, filter)
  keychain.each do |r|
    if filter.size > 0
      pr = true

      filter.each { |filter|
        k, v = filter.split('~', 2)
        f = r.get_field(k)
        next unless f
        raise "Invalid field '#{f}'" unless f

        unless f.index(v)
          pr = false
          break
        end
      }

      puts r.get_field(field) if pr
    else
      if field == 'all'
        puts "#{r.name}:"
        r.each { |k, v| puts "#{k}=#{v.inspect}" }
        puts
      else
        puts r.get_field(field)
      end
    end
  end
end

def op_diff(keychain, keychain2)
  # removed
  puts "# REMOVED:"
  keychain.each do |r|
    if !keychain2[r.uuid]
      puts r.inspect
    end
  end

  # added
  puts "# ADDED:"
  keychain2.each do |r|
    if !keychain[r.uuid]
      puts r.inspect
    end
  end

  # changed
  puts "# CHANGED:"
  keychain.each do |r|
    r2 = keychain2[r.uuid]
    puts r.name
    if r2
      r.each do |k, v|
        v2 = r2.get_field(k)
        if v != v2
          puts "#{k}: #{v} -> #{v2}"
        end
      end
    end
  end
end

case op
when 'list'
  # TODO: use query ?

  re = nil
  re = ARGV.shift if ARGV.size == 1

  op_list(keychain, re)
when 'query'
  # TODO: sort output

  raise "Please specify field to query" if ARGV.size == 0

  field = ARGV.shift
  filter = []
  ARGV.each { |f| filter << f }
  op_query(keychain, field, filter)
when 'copy'
  raise "Please specify regexp to search for" if ARGV.size == 0

  re = ARGV.shift

  op_copy(keychain, re)
when 'show'
  raise "Please specify regexp to search for" if ARGV.size == 0

  re = ARGV.shift

  op_show(keychain, re)
when 'diff'
  keychain2 = PasswordSafe::KeychainV3.new(ARGV.shift, true)

  puts 'Unlocked current keychain, now trying to unlock the other one.'
  if options[:stdin]
    keychain2.unlock(STDIN.read)
  else
    keychain2.unlock
  end

  op_diff(keychain, keychain2)
else
  raise "Unknown operation!"
end
